1.1 - Caso de Uso:
 Metodología:
        Aquí nomas tengo una pregunta. El monto lo voy a tomar como el precio unitario, no sé si se refiera a todo el valor, pero me parece que no
        Se realiza una consulta en el controlador, usando los modelos de las dos tablas, para unir la información
        mediante una sentencia similar al Join de sql, uniéndolos por el valor que comparten, en este Caso
        de la primer tabla de datos generales de factura su id, con el, id de la Factura de la segunda tabla.
        De esta manera se unen los campos necesarios y se puede emplear las operaciones de suma y multiplicación necesarias.

    Pseudocodigo:
    funcion facturaEncontrada obtenerFacturas(id_Factura){
        list <facturaEnBase>facturaEncontrada= new list <facturaEnBase> //usaremos un objeto del modelo para guardar los valores, uno que nosotros creamos en el que le pasamos los resultados de la consulta
        var connection = new sql connection() // se crea un objeto para conectarse a la base de datos, en C# se puede usar Using para que cierre las conexiones
        connection.open()
        string consulta = "select * from tablaFacturas where id=@id_Factura"
        sqlquery query = new sqlquery()
        query.execute(consulta)
        if(query != null){  
            foreach facturaEnBase in query{
                facturaEncontrada.folio = facturaEnBase.folio
                ... // y asi para todos los datos

            
        }

        connection.close() //se cierra la conexiones
        return facturaEncontrada // se obtiene la factura

    }
    
    }
    función double totalFactura(id_Factura){
        double totalF = 0
        obtenerFacturas(id_Factura)
        if(isNotNull(obtenerFacturas)){
            foreach factura in obtenerFacturas
            antesImpuesto = factura.monto * factura.cantidad
            impuesto = 0.01*antesImpuesto*factura.cantidad
            totalF += antesImpuesto + impuesto  
        }
        return totalF   
         }
1.2 
 Metodología. Aquí voy a definir una función que se llame Dashboard que hará la presentación de la función
 Este Dashboard tendrá dos niveles de gráfica de barras, ya sea en dos gráficas separadas o colocadas una junto 
 a la otra, para contrastar los valores y comprobar si los patrones se repiten.
 El histórico se toma como un valor fijo, pero se puede poner un calendario dentro de la interfaz del usuario,
 para que elija las fechas, tomar estos valores como parámetros, y realizar una consulta más dinámica.

 Para la lógica de obtener los datos, se crea una función que obtenga los valores de las facturas,
 como es muy similar a la función total FacturaFacturas se puede volver a usar.

 function array Ventas(){
    dictionary <date, double> ventas1 = new dictionary
    dictionary <date, double> ventas2 = new dictionary

    list claseFacturas facturas = new list claseFacturas()
    year = date.thisyear()
    year2=year-2
    //Aqui podemos usar un llamado directo para hacer una conexion con la base de datos para traernos la informacion
    //como en la anterior funcion, o hacemos un llamado a los modelos que se hayan obtenido mediante el
    // entity framework. Vamos a tomar esta ultima opcion ahora

        using (sqlcon connection = new sqlcon())
    {
        foreach facturasDB in facturasModeloBase{
            if(facturasDB.fecha>=year2 and facturasDB.fecha<=year)
            facturas.fecha = facturasDB.fecha
            ...
            if(date.year(facturas.fecha)>=year2 && date.year(facturas.fecha)<year-1){
                mes = date.month(facturas.fecha)
                ventas1.add (mes,totalFactura(facturas.Id))
            }
            if(date.year(facturas.fecha)>=year-1){
                mes = date.month(facturas.fecha)
                ventas1.add (mes,totalFactura(facturas.Id))
            }
        }
    }

    return ventas1, ventas2
 }
 //La funcion anterior seria mas como una clase, para poder generar objetos de ella

  Ventas vent = new Ventas()  
   

    function DashBoard(vent[0], vent[1])


 Observaciones. Una vez obtenido el DashBoard se puede visualizar en la imagen llamada Dashboard Ventas 1.2  que las ventas tienen una tendencia al alta, 
 en los meses que están al inicio y al final del año, coincidiendo con los meses de frío, podemos tomar esta
 tendencia para observar que productos pueden beneficiar a los clientes en estas fechas, y que modificaciones les
 podemos hacer al catálogo para ofrecer soluciones en época de verano.



